/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/Application.java to edit this template
 */
package br.ufg.inf.oop.internshipcandidatefinder.views;

import br.ufg.inf.oop.internshipcandidatefinder.exceptions.InvalidInputFromUserException;
import br.ufg.inf.oop.internshipcandidatefinder.exceptions.NotFoundException;
import br.ufg.inf.oop.internshipcandidatefinder.models.entities.Company;
import br.ufg.inf.oop.internshipcandidatefinder.models.entities.FederativeUnit;
import br.ufg.inf.oop.internshipcandidatefinder.models.entities.University;
import br.ufg.inf.oop.internshipcandidatefinder.services.UniversityReg;
import java.awt.Component;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * 
 */
public class MainView extends javax.swing.JFrame {

    private UniversityReg universityReg;

    /**
     * Creates new form MainView
     *
     * @throws java.lang.Exception
     */
    public MainView() throws Exception {
        this.universityReg = UniversityReg.getInstance();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        inserirUniversityMenuItem = new javax.swing.JMenuItem();
        buscarUniversityMenuItem = new javax.swing.JMenuItem();
        atualizarUniversityMenuItem = new javax.swing.JMenuItem();
        removerUniversityMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fileMenu.setMnemonic('f');
        fileMenu.setText("University");

        inserirUniversityMenuItem.setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        inserirUniversityMenuItem.setMnemonic('o');
        inserirUniversityMenuItem.setText("Inserir");
        inserirUniversityMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserirUniversityMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(inserirUniversityMenuItem);

        buscarUniversityMenuItem.setMnemonic('s');
        buscarUniversityMenuItem.setText("Buscar");
        buscarUniversityMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarUniversityMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(buscarUniversityMenuItem);

        atualizarUniversityMenuItem.setMnemonic('a');
        atualizarUniversityMenuItem.setText("Atualizar");
        atualizarUniversityMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizarUniversityMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(atualizarUniversityMenuItem);

        removerUniversityMenuItem.setMnemonic('x');
        removerUniversityMenuItem.setText("Remover");
        removerUniversityMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerUniversityMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(removerUniversityMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Course");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Inserir");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Buscar");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Atualizar");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Remover");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("student");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Inserir");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("Buscar");
        helpMenu.add(aboutMenuItem);

        jMenuItem1.setText("Atualizar");
        helpMenu.add(jMenuItem1);

        jMenuItem2.setText("Remover");
        helpMenu.add(jMenuItem2);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void removerUniversityMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerUniversityMenuItemActionPerformed
        //System.exit(0);

        University universityASerRemovida = mostrarOpcaoDeSelecaoDeUniversity(this);

        if (universityASerRemovida == null) {
            return;
        }

        try {
            System.out.println("Id da University a ser removida: " + universityASerRemovida.getUniversity_id());
            universityReg.removerUniversityPorId(universityASerRemovida.getUniversity_id());
            JOptionPane.showMessageDialog(this, "University removida: " + universityASerRemovida.getName(),
                    "Operação realizada com sucesso.", JOptionPane.INFORMATION_MESSAGE);
        } catch (InvalidInputFromUserException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "ENTRADA INVÁLIDA", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            reportInternalError(this, ex);
        }

    }//GEN-LAST:event_removerUniversityMenuItemActionPerformed

    private void buscarUniversityMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarUniversityMenuItemActionPerformed
        // TODO add your handling code here:

        University universityBuscada = mostrarOpcaoDeSelecaoDeUniversity(this);

        if (universityBuscada == null) {
            //JOptionPane.showMessageDialog(this, "Não foi encontrada nenhuma University com a initials");
            return;
        }

        JOptionPane.showMessageDialog(this, universityBuscada, "Dados de " + universityBuscada.getName(),
                JOptionPane.PLAIN_MESSAGE);

    }//GEN-LAST:event_buscarUniversityMenuItemActionPerformed

    private void inserirUniversityMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserirUniversityMenuItemActionPerformed
        // TODO add your handling code here:
        //new UniversityInsercaoView(this, rootPaneCheckingEnabled).setVisible(true);
        //new UniversityInsercaoView().setVisible(true);

        University university;
        Company company;

        String nameUniversity = JOptionPane.showInputDialog(this, "Digite o name da University.",
                "Inserção de University",
                JOptionPane.QUESTION_MESSAGE);
        String initialsUniversity = JOptionPane.showInputDialog(this, "Digite a initials da University.",
                "Inserção de University",
                JOptionPane.QUESTION_MESSAGE);
        String cnpjUniversity = JOptionPane.showInputDialog(this, "Digite o CNPJ da University.",
                "Inserção de University",
                JOptionPane.QUESTION_MESSAGE);
        String telephoneUniversity = JOptionPane.showInputDialog(this, "Digite o telephone da University.",
                "Inserção de University",
                JOptionPane.QUESTION_MESSAGE);

        try {
            company = mostrarOpcaoDeSelecaoDeaddress(this, "Inserção de University");
            university = new University(nameUniversity, initialsUniversity, cnpjUniversity, telephoneUniversity, company);

//            universityService.inserirUniversity(university, address);
            JOptionPane.showMessageDialog(this, "University inserida:\n\n" + university,
                    "University inserida com sucesso", JOptionPane.INFORMATION_MESSAGE);

        } catch (InvalidInputFromUserException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "ENTRADA INVÁLIDA", JOptionPane.ERROR_MESSAGE);

        } catch (Exception exception) {
            reportInternalError(this, exception);
        }

    }//GEN-LAST:event_inserirUniversityMenuItemActionPerformed

    private void atualizarUniversityMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atualizarUniversityMenuItemActionPerformed
        // TODO add your handling code here:
        University universityASerAtualizada = mostrarOpcaoDeSelecaoDeUniversity(this);

        if (universityASerAtualizada == null) {
            return;
        }

        try {
            System.out.println("Id da University a ser alterada: " + universityASerAtualizada.getUniversity_id());

            String possivelNovoName = JOptionPane.showInputDialog(this, "Digite o novo name da University ou o mesmo.",
                    universityASerAtualizada.getName());
            String possivelNovaInitials = JOptionPane.showInputDialog(this, "Digite a nova initials da University ou a mesma.",
                    universityASerAtualizada.getInitials());
            String possivelNovoCnpj = JOptionPane.showInputDialog(this, "Digite o novo CNPJ da University ou o mesmo.",
                    universityASerAtualizada.getCnpj());
            String possivelNovoTelephone = JOptionPane.showInputDialog(this, "Digite o novo telephone da University ou o mesmo.",
                    universityASerAtualizada.getTelephone());
            String possivelNovoCep = JOptionPane.showInputDialog(this, "Digite o novo CEP da University ou o mesmo.",
                    universityASerAtualizada.getAddress().getPoc_name());
            String possivelNovoLogradouro = JOptionPane.showInputDialog(this, "Digite o novo logradouro da University ou o mesmo.",
                    universityASerAtualizada.getAddress().getAddress());
            String possivelNovoBairro = JOptionPane.showInputDialog(this, "Digite o novo bairro da University ou o mesmo.",
                    universityASerAtualizada.getAddress().getField());
            String possivelNovoMunicipio = JOptionPane.showInputDialog(this, "Digite o novo município da University ou o mesmo.",
                    universityASerAtualizada.getAddress().getCompanyName());
            FederativeUnit possivelNovaFederativeUnit = FederativeUnit.fromInitials(JOptionPane.showInputDialog(
                    this, "Digite a initials da nova UF da University ou a mesma",
                    universityASerAtualizada.getAddress().getUnidadeFedrativa().getInitials()));

            universityASerAtualizada.setName(possivelNovoName);
            universityASerAtualizada.setInitials(possivelNovaInitials);
            universityASerAtualizada.setCnpj(possivelNovoCnpj);
            universityASerAtualizada.setTelephone(possivelNovoTelephone);
            universityASerAtualizada.getAddress().setPoc_name(possivelNovoCep);
            universityASerAtualizada.getAddress().setAddress(possivelNovoLogradouro);
            universityASerAtualizada.getAddress().setField(possivelNovoBairro);
            universityASerAtualizada.getAddress().setCompanyName(possivelNovoMunicipio);
            universityASerAtualizada.getAddress().setUnidadeFedrativa(possivelNovaFederativeUnit);

            universityReg.updateUniversity(universityASerAtualizada);

            JOptionPane.showMessageDialog(this, "Dados atualizados da University:\n\n" + universityASerAtualizada,
                    "Operação realizada com sucesso", JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            reportInternalError(this, ex);
        }

    }//GEN-LAST:event_atualizarUniversityMenuItemActionPerformed

    public static University mostrarOpcaoDeSelecaoDeUniversity(Component parentComponent) {
        String name = JOptionPane.showInputDialog(parentComponent, "Digite o name da university ou parte dele.",
                "Buscar university", JOptionPane.QUESTION_MESSAGE);

        List<University> universitysBuscadas;
        University universitySelecionada = null;

        try {
            universitysBuscadas = UniversityReg.getInstance().buscarUniversityPorName(name);
            //System.out.println(universitysBuscadas);
            StringBuilder stringResultadoDaBusca = new StringBuilder();
            for (University university : universitysBuscadas) {
                stringResultadoDaBusca.append(university.getName()).append(" (").append(university.getInitials()).append(")\n");
            }
            //JOptionPane.showMessageDialog(this, stringResultadoDaBusca, "Resultado da busca", JOptionPane.PLAIN_MESSAGE);
            String initialsDaUniversityASerSelecionada = JOptionPane.showInputDialog(parentComponent,
                    stringResultadoDaBusca, "Digite a initials da University desejada",
                    JOptionPane.QUESTION_MESSAGE);

            for (University university : universitysBuscadas) {
                if (university.getInitials().equalsIgnoreCase(initialsDaUniversityASerSelecionada)) {
                    universitySelecionada = university;
                }
            }

            while (universitySelecionada == null) {
                JOptionPane.showMessageDialog(parentComponent, "Não foi encontrada nenhuma"
                        + "University com a initials " + initialsDaUniversityASerSelecionada);
                initialsDaUniversityASerSelecionada = JOptionPane.showInputDialog(parentComponent,
                        stringResultadoDaBusca, "Digite a initials da University desejada",
                        JOptionPane.QUESTION_MESSAGE);

                for (University university : universitysBuscadas) {
                    if (university.getInitials().equalsIgnoreCase(initialsDaUniversityASerSelecionada)) {
                        universitySelecionada = university;
                    }
                }

            }
            System.out.println("Id da University selecionada: " + universitySelecionada.getUniversity_id());

            //JOptionPane.showMessageDialog(this, universityASerSelecionada, "Dados de " + universityASerSelecionada.getName(), JOptionPane.PLAIN_MESSAGE);
        } catch (NullPointerException nullPointerException) {
            // Nao faz nada, ja que o usuario apenas clicou em fechar o caixa de dialogo.
        } catch (NotFoundException notFoundException) {
            JOptionPane.showMessageDialog(parentComponent, "Não foi encontrada nenhuma University.");
        } catch (Exception exception) {
            reportInternalError(parentComponent, exception);
        }

        return universitySelecionada;
    }

    public static Company mostrarOpcaoDeSelecaoDeaddress(Component parentComponent, String title)
            throws InvalidInputFromUserException {
        Company company;

        String logradouro = JOptionPane.showInputDialog(parentComponent, "Digite o logradouro do endereço.",
                title,
                JOptionPane.QUESTION_MESSAGE);
        String bairro = JOptionPane.showInputDialog(parentComponent, "Digite o bairro do endereço.",
                title, JOptionPane.QUESTION_MESSAGE);
        String municipio = JOptionPane.showInputDialog(parentComponent, "Digite município do endereço.",
                title,
                JOptionPane.QUESTION_MESSAGE);
        String initialsFederativeUnit = JOptionPane.showInputDialog(parentComponent, "Digite a initials da Unidade"
                + " Federativa do endereço.\nUnidades Federativas:\n\n" + FederativeUnit.valuesToString(),
                title, JOptionPane.QUESTION_MESSAGE);
        String cep = JOptionPane.showInputDialog(parentComponent, "Digite o CEP do endereço.",
                title,
                JOptionPane.QUESTION_MESSAGE);

        try {
            company = new Company(cep, logradouro, bairro, municipio, FederativeUnit.fromInitials(initialsFederativeUnit));
        } catch (IllegalArgumentException illegalArgumentException) {
            throw new InvalidInputFromUserException("Initials da Unidade Federaiva inválida.");
        }

        return company;
    }

    /**
     * Registra no logger um erro interno e mostra uma mensagem de erro interno
     * ao usuario em caixa de dialogo JOptionPane.
     *
     * @param parentComponent
     * @param exception
     */
    public static void reportInternalError(Component parentComponent, Exception exception) {
        Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, exception);
        reportInternalErrorToUser(parentComponent, exception);
    }

    /**
     * Mostra uma mensagem de erro ao usuario em uma caixa de dialogo
     * JOptionPane.
     *
     * @param parentComponent
     * @param exception
     */
    private static void reportInternalErrorToUser(Component parentComponent, Exception exception) {
        JOptionPane.showMessageDialog(parentComponent, "Houve um erro interno. Se desejar, envie uma "
                + "mensagem ao suporte informando a seguinte mensagem:\n\n" + exception.getMessage(),
                "ERRO INTERNO", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MainView().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null,
                            "Houve um erro interno. Se desejar, envie uma mensagem para o suporte explicitando "
                            + "a mensagem de erro abaixo:\n\n " + ex.getMessage(),
                            "ERRO INTERNO", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem atualizarUniversityMenuItem;
    private javax.swing.JMenuItem buscarUniversityMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem inserirUniversityMenuItem;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem removerUniversityMenuItem;
    // End of variables declaration//GEN-END:variables

}
